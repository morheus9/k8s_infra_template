name: "Terraform Deploy"

on:
  push:
    branches:
      - dev
      - test
      - main

jobs:
  terraform_backend:
    name: "Creating backend"
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Setup Yandex CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Determine Environment
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          if [ "$BRANCH_NAME" == "dev" ]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" == "test" ]; then
            echo "ENV=test" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" == "main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH_NAME"
            exit 1
          fi

      # Getting AWS keys
      - name: Get AWS Credentials from SA
        env:
          ENV: ${{ env.ENV }}
          FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          IAM_TOKEN: ${{ secrets.YC_TOKEN }}
        run: |
          # Установка Yandex CLI
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          exec -l $SHELL

          # Определяем имя сервисного аккаунта на основе среды
          case "$ENV" in
            dev) SA_NAME="sa-terraform-state-dev" ;;
            test) SA_NAME="sa-terraform-state-test" ;;
            prod) SA_NAME="sa-terraform-state-prod" ;;
            *) echo "Unknown ENV: $ENV"; exit 1 ;;
          esac

          # Устанавливаем yc CLI
          yc config set token $IAM_TOKEN

          # Получаем ID сервисного аккаунта
          SA_ID=$(yc iam service-account get --name=$SA_NAME --folder-id=$FOLDER_ID --format json | jq -r .id)

          if [ -z "$SA_ID" ] || [ "$SA_ID" = "null" ]; then
            echo "Service account $SA_NAME not found"
            exit 1
          fi

          echo "Service Account ID: $SA_ID"

          # Проверяем существующие ключи
          KEY_JSON=$(yc iam access-key list --service-account-id=$SA_ID --format json)

          if [ "$(echo $KEY_JSON | jq length)" -gt 0 ]; then
            echo "Using existing key"
            AWS_ACCESS_KEY_ID=$(echo $KEY_JSON | jq -r '.[0].key.id')
            AWS_SECRET_ACCESS_KEY=$(echo $KEY_JSON | jq -r '.[0].secret')
          else
            echo "Creating new static key"
            KEY_JSON=$(yc iam access-key create --service-account-id=$SA_ID --description="auto-created-by-github-actions" --format json)
            AWS_ACCESS_KEY_ID=$(echo $KEY_JSON | jq -r .key.id)
            AWS_SECRET_ACCESS_KEY=$(echo $KEY_JSON | jq -r .secret)
          fi

          # Сохраняем в окружение
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: .
        run: |
          ls -la
          terraform init \
            -backend-config=environments/${{ env.ENV }}/${{ env.ENV }}.tfbackend \
            -reconfigure

      - name: Terraform Workspace
        working-directory: .
        run: |
          terraform workspace select ${{ env.ENV }} || terraform workspace new ${{ env.ENV }}

      - name: Terraform Plan
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_token: ${{ secrets.YC_TOKEN }}
        run: |
          terraform plan -var-file=environments/${{ env.ENV }}/${{ env.ENV }}.tfvars

      - name: Terraform Apply
        if: github.ref_name != 'main'
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_token: ${{ secrets.YC_TOKEN }}
        run: |
          terraform apply -auto-approve -var-file=environments/${{ env.ENV }}/${{ env.ENV }}.tfvars

      - name: Terraform Apply (Prod)
        if: github.ref_name == 'main'
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_token: ${{ secrets.YC_TOKEN }}
        run: |
          terraform apply -auto-approve -var-file=environments/${{ env.ENV }}/prod.tfvars
