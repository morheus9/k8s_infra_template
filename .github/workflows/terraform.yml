name: Terraform Pipeline

on:
  push:
    branches:
      - main
      - dev
      - test
  pull_request:
    branches:
      - main
      - dev
      - test

env:
  YC_SERVICE_ACCOUNT_KEY_FILE: /tmp/sa-key.json
  # Если необходимо, можно задать TERRAFORM_VERSION здесь
  TERRAFORM_VERSION: "1.0.0"

jobs:
  lint_checkov:
    name: Lint (Checkov)
    runs-on: ubuntu-latest
    container:
      image: bridgecrew/checkov:latest
      options: --entrypoint bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Checkov
        run: |
          checkov -d . \
            --skip-path .gitlab-ci.yml \
            --skip-path .github/workflows/terraform.yml \
            --skip-path README.md \
            --skip-path modules/kube/README.md \
            --skip-path modules/kube/nginx.yaml \
            --skip-path modules/s3/README.md \
            --skip-path modules/s3/.gitignore \
            --skip-path .tflint.hcl \
            --download-external-modules true \
            --soft-fail
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  lint_tflint:
    name: Lint (TFLint)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/terraform-linters/tflint:latest
      options: --entrypoint bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run TFLint
        run: |
          tflint -f compact
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment variables and terraformrc
        run: |
          # Определяем ENV и AWS переменные на основе ветки
          if [ "${{ github.ref_name }}" = "main" ]; then
            export ENV=prod
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            export ENV=dev
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            export ENV=test
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_TEST }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi

          echo "Using ENV=$ENV"

          # Настройка terraformrc для использования зеркала провайдеров
          mkdir -p ~/.terraform.d
          cat <<EOF >> ~/.terraformrc 
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

      - name: Cache .terraform directory
        uses: actions/cache@v3
        with:
          path: .terraform
          key: ${{ github.ref_name }}-${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          terraform init -backend-config="environments/$ENV/$ENV.tfbackend" -reconfigure
        env:
          # Передаем AWS и ENV, которые были экспортированы в previous step
          ENV: ${{ env.ENV }}
      # Валидация
      - name: Terraform Validate
        run: terraform validate
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment variables and terraformrc
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            export ENV=prod
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            export ENV=dev
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            export ENV=test
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_TEST }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi
          echo "Using ENV=$ENV"

          mkdir -p ~/.terraform.d
          cat <<EOF >> ~/.terraformrc 
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF

          terraform init -backend-config="environments/$ENV/$ENV.tfbackend" -reconfigure
          echo "${{ secrets.YC_KEY }}" > /tmp/sa-key.json
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

      - name: Cache .terraform directory
        uses: actions/cache@v3
        with:
          path: .terraform
          key: ${{ github.ref_name }}-${{ env.TERRAFORM_VERSION }}

      - name: Terraform Plan
        run: |
          terraform plan -var-file=environments/$ENV/$ENV.tfvars -out=planfile
        env:
          ENV: ${{ env.ENV }}

      - name: Upload Terraform plan artifact
        uses: actions/upload-artifact@v3
        with:
          name: planfile
          path: planfile
          retention-days: 1

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    needs: plan
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download plan artifact
        uses: actions/download-artifact@v3
        with:
          name: planfile
          path: .

      - name: Set up environment variables and terraformrc
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            export ENV=prod
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            export ENV=dev
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            export ENV=test
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_TEST }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi
          echo "Using ENV=$ENV"

          mkdir -p ~/.terraform.d
          cat <<EOF >> ~/.terraformrc 
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

      - name: Terraform Apply
        run: terraform apply -auto-approve planfile
        env:
          ENV: ${{ env.ENV }}

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    needs: plan
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment variables and terraformrc
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            export ENV=prod
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            export ENV=dev
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            export ENV=test
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID_TEST }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi
          echo "Using ENV=$ENV"

          mkdir -p ~/.terraform.d
          cat <<EOF >> ~/.terraformrc 
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin/bin

      - name: Terraform Destroy
        run: terraform destroy -var-file=environments/$ENV/$ENV.tfvars -auto-approve
        env:
          ENV: ${{ env.ENV }}
