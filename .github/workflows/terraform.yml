name: "Terraform Deploy"

on:
  push:
    branches:
      - dev
      - test
      - main

jobs:
  terraform_backend:
    name: "Terraform CI/CD"
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Determine Environment
        run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "test" ]; then
            echo "ENV=test" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "Unsupported branch: ${{ github.ref_name }}"
            exit 1
          fi

      - name: Get AWS Credentials from Service Account
        id: get-creds
        env:
          FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          IAM_TOKEN: ${{ secrets.YC_TOKEN }}
        run: |
          # Устанавливаем yc CLI
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH="$HOME/bin:$PATH"
          exec -l $SHELL
          # Проверяем установку
          if ! command -v yc &> /dev/null; then
            echo "::error::yc CLI installation failed"
            exit 1
          fi

          # Определяем имя сервисного аккаунта
          case "$ENV" in
            dev) SA_NAME="sa-terraform-state-dev" ;;
            test) SA_NAME="sa-terraform-state-test" ;;
            prod) SA_NAME="sa-terraform-state-prod" ;;
            *) echo "::error::Unknown ENV: $ENV"; exit 1 ;;
          esac

          # Настраиваем yc
          yc config set token $IAM_TOKEN
          yc config set folder-id $FOLDER_ID

          # Получаем ID сервисного аккаунта
          SA_ID=$(yc iam service-account get --name=$SA_NAME --format=json | jq -r .id)
          if [ -z "$SA_ID" ]; then
            echo "::error::Service account $SA_NAME not found"
            exit 1
          fi
          echo "SA_ID=$SA_ID" >> $GITHUB_ENV

          # Получаем или создаем ключи
          KEY_JSON=$(yc iam access-key list --service-account-id=$SA_ID --format=json)
          if [ $(echo "$KEY_JSON" | jq '. | length') -gt 0 ]; then
            AWS_ACCESS_KEY_ID=$(echo "$KEY_JSON" | jq -r '.[0].key.id')
            AWS_SECRET_ACCESS_KEY=$(echo "$KEY_JSON" | jq -r '.[0].secret')
          else
            NEW_KEY=$(yc iam access-key create --service-account-id=$SA_ID --description="GitHub Actions" --format=json)
            AWS_ACCESS_KEY_ID=$(echo "$NEW_KEY" | jq -r .key.id)
            AWS_SECRET_ACCESS_KEY=$(echo "$NEW_KEY" | jq -r .secret)
          fi

          # Экспортируем переменные
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"

      - name: Terraform Init
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        run: |
          terraform init \
            -backend-config=environments/${{ env.ENV }}/${{ env.ENV }}.tfbackend \
            -reconfigure
      - name: Terraform Workspace
        working-directory: .
        run: |
          terraform workspace select ${{ env.ENV }} || terraform workspace new ${{ env.ENV }}

      - name: Terraform Plan
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_token: ${{ secrets.YC_TOKEN }}
        run: |
          terraform plan -var-file=environments/${{ env.ENV }}/${{ env.ENV }}.tfvars

      - name: Terraform Apply
        if: github.ref_name != 'main'
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_token: ${{ secrets.YC_TOKEN }}
        run: |
          terraform apply -auto-approve -var-file=environments/${{ env.ENV }}/${{ env.ENV }}.tfvars

      - name: Terraform Apply (Prod)
        if: github.ref_name == 'main'
        working-directory: .
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_token: ${{ secrets.YC_TOKEN }}
        run: |
          terraform apply -auto-approve -var-file=environments/${{ env.ENV }}/prod.tfvars
