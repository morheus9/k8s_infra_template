name: Terraform Pipeline

on:
  push:
    branches:
      - main
      - dev
      - test
  pull_request:
    branches:
      - main
      - dev
      - test
  workflow_dispatch:

env:
  YC_SERVICE_ACCOUNT_KEY_FILE: /tmp/sa-key.json
  TERRAFORM_VERSION: "1.0.0"

jobs:
  lint_checkov:
    name: Lint (Checkov)
    runs-on: ubuntu-latest
    container:
      image: bridgecrew/checkov:latest
      options: --entrypoint bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        run: |
          checkov -d . \
            --skip-path .gitlab-ci.yml \
            --skip-path .github/workflows/terraform.yml \
            --skip-path README.md \
            --skip-path modules/kube/README.md \
            --skip-path modules/kube/nginx.yaml \
            --skip-path modules/s3/README.md \
            --skip-path modules/s3/.gitignore \
            --skip-path .tflint.hcl \
            --download-external-modules true \
            --soft-fail
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  lint_tflint:
    name: Lint (TFLint)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/terraform-linters/tflint:latest
      options: --entrypoint bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TFLint
        run: tflint -f compact
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set ENV variable and configure AWS credentials
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV="prod"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            ENV="dev"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            ENV="test"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi
          echo "ENV=$ENV" >> "$GITHUB_ENV"

      - name: Configure terraformrc mirror
        run: |
          mkdir -p ~/.terraform.d
          cat <<EOF > ~/.terraformrc
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF

      - name: Cache .terraform directory
        uses: actions/cache@v4
        with:
          path: .terraform
          key: ${{ github.ref_name }}-${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init -backend-config="environments/$ENV/$ENV.tfbackend" -reconfigure

      - name: Terraform Validate
        run: terraform validate

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set ENV variable, AWS credentials and create terraformrc
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV="prod"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            ENV="dev"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            ENV="test"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi
          echo "ENV=$ENV" >> "$GITHUB_ENV"

          export AWS_ACCESS_KEY_ID_VAR AWS_SECRET_ACCESS_KEY_VAR CLOUD_ID_VAR FOLDER_ID_VAR

          echo "AWS_ACCESS_KEY_ID=${!AWS_ACCESS_KEY_ID_VAR}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${!AWS_SECRET_ACCESS_KEY_VAR}" >> "$GITHUB_ENV"
          echo "CLOUD_ID=${!CLOUD_ID_VAR}" >> "$GITHUB_ENV"
          echo "FOLDER_ID=${!FOLDER_ID_VAR}" >> "$GITHUB_ENV"

      - name: Configure terraformrc mirror
        run: |
          mkdir -p ~/.terraform.d
          cat <<EOF > ~/.terraformrc
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF
          echo "${{ secrets.YC_KEY }}" > /tmp/sa-key.json

      - name: Cache .terraform directory
        uses: actions/cache@v4
        with:
          path: .terraform
          key: ${{ github.ref_name }}-${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init -backend-config="environments/$ENV/$ENV.tfbackend" -reconfigure

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="environments/$ENV/$ENV.tfvars" \
            -var "cloud_id=$CLOUD_ID" \
            -var "folder_id=$FOLDER_ID" \
            -var "token=not-used" \
            -out=planfile

      - name: Upload Terraform plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: planfile
          path: planfile
          retention-days: 1

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    needs: plan
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Terraform plan artifact
        uses: actions/download-artifact@v4
        with:
          name: planfile
          path: .

      - name: Set ENV variable and configure AWS credentials and terraformrc
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV="prod"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            ENV="dev"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            ENV="test"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi
          echo "ENV=$ENV" >> "$GITHUB_ENV"

          mkdir -p ~/.terraform.d
          cat <<EOF > ~/.terraformrc
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF

      - name: Terraform Apply
        run: terraform apply -auto-approve planfile

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
      options: --entrypoint bash
    needs: plan
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set ENV variable and configure AWS credentials and terraformrc
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV="prod"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            ENV="dev"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            ENV="test"
          else
            echo "Branch ${{ github.ref_name }} не обрабатывается. Прерываю job!"
            exit 1
          fi
          echo "ENV=$ENV" >> "$GITHUB_ENV"

          mkdir -p ~/.terraform.d
          cat <<EOF > ~/.terraformrc
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF

      - name: Terraform Destroy
        run: terraform destroy -var-file="environments/$ENV/$ENV.tfvars" -auto-approve
